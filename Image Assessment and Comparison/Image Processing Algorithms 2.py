# -*- coding: utf-8 -*-
"""IP Assignment 2 Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DTpPXaQ-SWfqgryaXfdBjJu9i6Fp3otu

# Imports and Dependencies
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image, ImageEnhance
import cv2

"""# Universal Quality Index (UQI)"""

# def uqi(reference_image, fused_image):
#   reference_image = np.array(reference_image)
#   fused_image = np.array(fused_image)
#   covariance = np.mean((reference_image - np.mean(reference_image)) * (fused_image - np.mean(fused_image)))
#   variance_reference = np.var(reference_image)
#   variance_fused = np.var(fused_image)
#   mean_reference = np.mean(reference_image)
#   mean_fused = np.mean(fused_image)
#   uqi_value = (4 * covariance * mean_reference * mean_fused) / ((variance_reference + variance_fused) * (mean_reference ** 2 + mean_fused ** 2))
#   return uqi_value

def uqi(reference_image, fused_image):
  reference_image = np.array(reference_image)
  fused_image = np.array(fused_image)
  fused_image_resized = np.array(Image.fromarray(fused_image).resize(reference_image.shape))
  covariance = np.mean((reference_image - np.mean(reference_image)) * (fused_image_resized - np.mean(fused_image_resized)))
  variance_reference = np.var(reference_image)
  variance_fused = np.var(fused_image_resized)
  mean_reference = np.mean(reference_image)
  mean_fused = np.mean(fused_image_resized)
  uqi_value = (4 * covariance * mean_reference * mean_fused) / ((variance_reference + variance_fused) * (mean_reference ** 2 + mean_fused ** 2))
  return uqi_value

image_path = "/content/CameraMan.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

uqi_score = uqi(reference_image, fused_image)
print("UQI Score: ",uqi_score)

# Ttwo identical images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Brightness(modified_image)
modified_image = enhancer.enhance(2.5)


uqi_score = uqi(reference_image, modified_image)
print("UQI Score: ",uqi_score)


# Same images with different brightness:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Contrast(modified_image)
modified_image = enhancer.enhance(10)


uqi_score = uqi(reference_image, modified_image)
print("UQI Score: ",uqi_score)


# Same images with different constrasts:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/CameraMan.jpg"
image2_path = "/content/Livingroom.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

uqi_score = uqi(reference_image, fused_image)
print("UQI Score: ",uqi_score)

# Two different images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image_path = "/content/Binary 1.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

uqi_score = uqi(reference_image, fused_image)
print("UQI Score: ",uqi_score)

# Two identical binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/Binary 1.jpg"
image2_path = "/content/Binary 2.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

uqi_score = uqi(reference_image, fused_image)
print("UQI Score: ",uqi_score)

# Two different binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

"""# Quality Index (QI):"""

# def quality_index(reference_image, fused_image):
#   reference_image = np.array(reference_image)
#   fused_image = np.array(fused_image)
#   covariance = np.mean((reference_image - np.mean(reference_image)) * (fused_image - np.mean(fused_image)))
#   variance_reference = np.var(reference_image)
#   variance_fused = np.var(fused_image)
#   mean_reference = np.mean(reference_image)
#   mean_fused = np.mean(fused_image)
#   qi = (4 * covariance * mean_reference * mean_fused) / ((variance_reference + variance_fused) * (mean_reference ** 2 + mean_fused ** 2))
#   return qi


def quality_index(reference_image, fused_image):
  reference_image = np.array(reference_image)
  fused_image = np.array(fused_image)
  fused_image_resized = np.array(Image.fromarray(fused_image).resize(reference_image.shape))
  covariance = np.mean((reference_image - np.mean(reference_image)) * (fused_image_resized - np.mean(fused_image_resized)))
  variance_reference = np.var(reference_image)
  variance_fused = np.var(fused_image_resized)
  mean_reference = np.mean(reference_image)
  mean_fused = np.mean(fused_image_resized)
  qi = (4 * covariance * mean_reference * mean_fused) / ((variance_reference + variance_fused) * (mean_reference ** 2 + mean_fused ** 2))
  return qi

image_path = "/content/CameraMan.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

qi_score = quality_index(reference_image, fused_image)
print("QI Score: ",qi_score)

# Ttwo identical images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Brightness(modified_image)
modified_image = enhancer.enhance(2.5)


qi_score = quality_index(reference_image, modified_image)
print("QI Score: ",qi_score)


# Same images with different brightness:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Contrast(modified_image)
modified_image = enhancer.enhance(10)


qi_score = quality_index(reference_image, modified_image)
print("QI Score: ",qi_score)


# Same images with different constrasts:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/CameraMan.jpg"
image2_path = "/content/Livingroom.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

qi_score = uqi(reference_image, fused_image)
print("QI Score: ",qi_score)

# Two different images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image_path = "/content/Binary 1.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

qi_score = uqi(reference_image, fused_image)
print("QI Score: ",qi_score)

# Two identical binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/Binary 1.jpg"
image2_path = "/content/Binary 2.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

qi_score = uqi(reference_image, fused_image)
print("QI Score: ",qi_score)

# Two different binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

"""# Percentage Fit Error (PFE)"""

# def pfe(reference_image, fused_image):
#   reference_image = np.array(reference_image)
#   fused_image = np.array(fused_image)
#   difference = reference_image - fused_image
#   sum_squared_difference = np.sum(difference ** 2)
#   norm_difference = np.sqrt(sum_squared_difference)
#   sum_squared_reference = np.sum(reference_image ** 2)
#   norm_reference = np.sqrt(sum_squared_reference)
#   pfe_value = (norm_difference / norm_reference) * 100
#   return pfe_value

def pfe(reference_image, fused_image):
  reference_image = np.array(reference_image)
  fused_image = np.array(fused_image)
  fused_image_resized = np.array(Image.fromarray(fused_image).resize(reference_image.shape))
  difference = reference_image - fused_image_resized
  sum_squared_difference = np.sum(difference ** 2)
  norm_difference = np.sqrt(sum_squared_difference)
  sum_squared_reference = np.sum(reference_image ** 2)
  norm_reference = np.sqrt(sum_squared_reference)
  pfe_value = (norm_difference / norm_reference) * 100
  return pfe_value

image_path = "/content/CameraMan.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two identical images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Brightness(modified_image)
modified_image = enhancer.enhance(2.5)


pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)

# Same images with different brightness:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Contrast(modified_image)
modified_image = enhancer.enhance(10)


pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)


# Same images with different constrasts:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/CameraMan.jpg"
image2_path = "/content/Livingroom.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two different images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image_path = "/content/Binary 1.jpg"
reference_image = np.array(Image.open(image_path).convert('L'))
fused_image = np.array(Image.open(image_path).convert('L'))

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two identical binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image1_path = "/content/Binary 1.jpg"
image2_path = "/content/Binary 2.jpg"
reference_image = np.array(Image.open(image1_path).convert('L'))
fused_image = np.array(Image.open(image2_path).convert('L'))

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two different binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

"""# Percentage Fit Error (PFE) (New)"""

def pfe(image1, image2):
  image1 = image1.convert('L')
  image2 = image2.convert('L')
  image1 = np.array(image1)
  image2 = np.array(image2)
  difference = image1 - image2
  sum_squared_difference = np.sum(difference ** 2)
  norm_difference = np.sqrt(sum_squared_difference)
  sum_squared_reference = np.sum(image1 ** 2)
  norm_reference = np.sqrt(sum_squared_reference)
  final_pfe_value = (norm_difference / norm_reference) * 100
  return final_pfe_value

image_path = "/content/CameraMan.jpg"
reference_image = Image.open(image_path).convert('L')
fused_image = Image.open(image_path).convert('L')

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two identical images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Brightness(modified_image)
modified_image = enhancer.enhance(2.5)


pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)

# Same images with different brightness:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
enhancer = ImageEnhance.Contrast(modified_image)
modified_image = enhancer.enhance(10)


pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)


# Same images with different constrasts:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
modified_image = ImageOps.invert(modified_image)

pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)

# Same images but one is normal and the other is inverted:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

image_path = "/content/Binary 1.jpg"
reference_image = Image.open(image_path).convert('L')
fused_image = Image.open(image_path).convert('L')

pfe_score = pfe(reference_image, fused_image)
print("PFE Score: ",pfe_score)

# Two identical binary images:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(fused_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()

modified_image = Image.open(image_path).convert('L')
modified_image = ImageOps.invert(modified_image)

pfe_score = pfe(reference_image, modified_image)
print("PFE Score: ",pfe_score)

# Same images but one is normal and the other is inverted:
plt.figure(figsize=(8, 8))
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')
plt.show()

plt.figure(figsize=(8, 8))
plt.imshow(modified_image, cmap='gray')
plt.title('Fused Image')
plt.axis('off')
plt.show()